/**
 * Copyright (C) 2012 SINTEF <franck.fleurey@sintef.no>
 *
 * Licensed under the GNU LESSER GENERAL PUBLIC LICENSE, Version 3, 29 June 2007;
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * 	http://www.gnu.org/licenses/lgpl-3.0.txt
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package org.thingml.traale.desktop;

import org.thingml.bglib.gui.BLEService;
import org.thingml.bglib.gui.BLEDevice;
import org.thingml.bglib.gui.BLEDeviceList;
import org.thingml.bglib.gui.BLEAttribute;
import gnu.io.SerialPort;
import java.util.Iterator;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.prefs.Preferences;
import javax.swing.JOptionPane;
import org.thingml.bglib.BDAddr;
import org.thingml.bglib.BGAPITransport;
import org.thingml.bglib.BGAPI;
import org.thingml.bglib.BGAPIListener;
import org.thingml.bglib.BGAPIPacketLogger;
import org.thingml.bglib.gui.BLED112;

/**
 *
 * @author franck
 */
public class BLEExplorerDialog extends javax.swing.JDialog implements BGAPIListener {

    protected BGAPI bgapi;
    protected SerialPort port;

    public BGAPI getBgapi() {
        return bgapi;
    }

    public int getConnection() {
        return connection;
    }

    public BLEDevice getBledevice() {
        return bledevice;
    }
    
    public boolean isConnected() {
        return bgapi != null && connection > -1;
    }
    
    public void disconnect() {
        if (bgapi != null) {
            bgapi.removeListener(this);
            bgapi.getLowLevelDriver().removeListener(logger);
            System.out.println("BLE: Rreset BLED112 Dongle");
            bgapi.send_system_reset(0);
            bgapi.disconnect();
        }
        if (port != null) {
            port.close();
        }
        bgapi = null;
        port = null;
    }
    
    protected BLEDeviceList devList = new BLEDeviceList();
    
    /**
     * Creates new form BLEExplorerFrame
     */
    public BLEExplorerDialog() {
        initComponents();
        jTextFieldSerial.setText(prefs.get("BLED112Serial", ""));
        
        
        jTextFieldIntervalMin.setText(prefs.get("interval_min", "60"));
        jTextFieldIntervalMax.setText(prefs.get("interval_max", "60"));
        jTextFieldLatency.setText(prefs.get("latency", "100"));
        jTextFieldTimeout.setText(prefs.get("timeout", "0"));
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jButtonBLED112Disc = new javax.swing.JButton();
        jButtonBLED112Conn = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jTextFieldSerial = new javax.swing.JTextField();
        jButtonBrowse = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jListDevices = new javax.swing.JList();
        jButtonDiscover = new javax.swing.JButton();
        jButtonDisconnect = new javax.swing.JButton();
        jButtonConnect = new javax.swing.JButton();
        jTextFieldConnStatus = new javax.swing.JTextField();
        jButtonRefresh = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        jTextFieldIntervalMin = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jTextFieldIntervalMax = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jTextFieldLatency = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        jTextFieldTimeout = new javax.swing.JTextField();
        jButton2 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jTextFieldBLED112 = new javax.swing.JTextField();
        jCheckBoxDebug = new javax.swing.JCheckBox();

        jButtonBLED112Disc.setText("Disconnect");
        jButtonBLED112Disc.setEnabled(false);
        jButtonBLED112Disc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonBLED112DiscActionPerformed(evt);
            }
        });

        jButtonBLED112Conn.setText("Connect");
        jButtonBLED112Conn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonBLED112ConnActionPerformed(evt);
            }
        });

        jLabel3.setText("Serial Port:");

        jTextFieldSerial.setText("COM1");

        jButtonBrowse.setText("Browse...");
        jButtonBrowse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonBrowseActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTextFieldSerial)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButtonBrowse, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButtonBLED112Disc, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButtonBLED112Conn, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(jButtonBLED112Disc)
                .addComponent(jButtonBLED112Conn)
                .addComponent(jLabel3)
                .addComponent(jTextFieldSerial, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(jButtonBrowse))
        );

        jLabel2.setText("BLE Devices:");

        jListDevices.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jListDevices.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jListDevicesMouseClicked(evt);
            }
        });
        jListDevices.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                jListDevicesValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(jListDevices);

        jButtonDiscover.setText("Discover");
        jButtonDiscover.setEnabled(false);
        jButtonDiscover.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonDiscoverActionPerformed(evt);
            }
        });

        jButtonDisconnect.setText("Disconnect");
        jButtonDisconnect.setEnabled(false);
        jButtonDisconnect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonDisconnectActionPerformed(evt);
            }
        });

        jButtonConnect.setText("Connect");
        jButtonConnect.setEnabled(false);
        jButtonConnect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonConnectActionPerformed(evt);
            }
        });

        jTextFieldConnStatus.setEditable(false);
        jTextFieldConnStatus.setText("No connection.");

        jButtonRefresh.setText("Refresh");
        jButtonRefresh.setEnabled(false);
        jButtonRefresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonRefreshActionPerformed(evt);
            }
        });

        jLabel4.setText("interval_min:");

        jTextFieldIntervalMin.setText("6");
        jTextFieldIntervalMin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldIntervalMinActionPerformed(evt);
            }
        });

        jLabel5.setText("interval_max:");

        jTextFieldIntervalMax.setText("6");

        jLabel6.setText("latency:");

        jTextFieldLatency.setText("100");
        jTextFieldLatency.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldLatencyActionPerformed(evt);
            }
        });

        jLabel7.setText("timeout:");

        jTextFieldTimeout.setText("0");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addComponent(jButtonRefresh)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextFieldConnStatus)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButtonConnect, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButtonDisconnect, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextFieldIntervalMin, javax.swing.GroupLayout.DEFAULT_SIZE, 45, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextFieldIntervalMax, javax.swing.GroupLayout.DEFAULT_SIZE, 45, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextFieldLatency, javax.swing.GroupLayout.DEFAULT_SIZE, 49, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel7)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextFieldTimeout, javax.swing.GroupLayout.DEFAULT_SIZE, 39, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addComponent(jScrollPane1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButtonDiscover, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButtonDiscover)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(14, 14, 14)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(jTextFieldIntervalMin, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5)
                    .addComponent(jTextFieldIntervalMax, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6)
                    .addComponent(jTextFieldLatency, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7)
                    .addComponent(jTextFieldTimeout, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonRefresh)
                    .addComponent(jTextFieldConnStatus, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonConnect)
                    .addComponent(jButtonDisconnect))
                .addGap(0, 12, Short.MAX_VALUE))
        );

        jButton2.setText("Close");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jLabel1.setText("Dongle:");

        jTextFieldBLED112.setEditable(false);
        jTextFieldBLED112.setText("Not Connected.");

        jCheckBoxDebug.setText("Debug BLED112");
        jCheckBoxDebug.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxDebugActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jCheckBoxDebug)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addComponent(jTextFieldBLED112))
                        .addGap(18, 18, 18)
                        .addComponent(jButton2)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jCheckBoxDebug)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton2, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel1)
                        .addComponent(jTextFieldBLED112, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    Preferences prefs = Preferences.userRoot().node(this.getClass().getName());
    
    private void jButtonBLED112ConnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonBLED112ConnActionPerformed
        jButtonBLED112Conn.setEnabled(false);
        jButtonBLED112Disc.setEnabled(false);
        jButtonDiscover.setEnabled(false);
        port  = BLED112.connectSerial(jTextFieldSerial.getText().trim());
   
        if (port != null) {
            prefs.put("BLED112Serial", jTextFieldSerial.getText().trim());
            try {
                jTextFieldBLED112.setText("Connected on " + port);
                bgapi = new BGAPI(new BGAPITransport(port.getInputStream(), port.getOutputStream()));
                bgapi.addListener(this);
                Thread.sleep(250);
                bgapi.send_system_get_info();
                jButtonBLED112Disc.setEnabled(true);
                jButtonDiscover.setEnabled(true);
                if (jCheckBoxDebug.isSelected()) bgapi.getLowLevelDriver().addListener(logger);
                
                // Run discovery
                devList.clear();
                jListDevices.setModel(devList);
                bgapi.send_gap_set_scan_parameters(10, 250, 1);
                bgapi.send_gap_discover(1);
                
                
            } catch (Exception ex) {
                Logger.getLogger(BLEExplorerDialog.class.getName()).log(Level.SEVERE, null, ex);
                jTextFieldBLED112.setText("Exception while connecting to " + port);
                jButtonBLED112Conn.setEnabled(true);
            }
        }
        else {
            jTextFieldBLED112.setText("Invalide serial port:" + jTextFieldBLED112.getText());
            jButtonBLED112Conn.setEnabled(true);
        }
    }//GEN-LAST:event_jButtonBLED112ConnActionPerformed

    private void jButtonBLED112DiscActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonBLED112DiscActionPerformed
        jButtonBLED112Conn.setEnabled(false);
        jButtonBLED112Disc.setEnabled(false);
        jButtonDiscover.setEnabled(false);
        jButtonConnect.setEnabled(false);
        jButtonRefresh.setEnabled(false);
        jButtonDisconnect.setEnabled(false);
        devList.clear();
        jListDevices.setModel(devList);
        connection = -1;
        disconnect();
        jTextFieldBLED112.setText("Disconnected.");
        jButtonBLED112Conn.setEnabled(true);
    }//GEN-LAST:event_jButtonBLED112DiscActionPerformed

    private void jButtonDiscoverActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonDiscoverActionPerformed
        devList.clear();
        jListDevices.setModel(devList);
        bgapi.send_gap_set_scan_parameters(10, 250, 1);
        bgapi.send_gap_discover(1);
        jButtonConnect.setEnabled(false);
        //jButtonDiscover.setEnabled(false);
    }//GEN-LAST:event_jButtonDiscoverActionPerformed

    private void jButtonConnectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonConnectActionPerformed
        do_connect();
    }//GEN-LAST:event_jButtonConnectActionPerformed

    private void do_connect() {
        bledevice = (BLEDevice) jListDevices.getSelectedValue();
        if (bledevice == null) return;
        
        int interval_min;
        int interval_max;
        int latency;
        int timeout;
        
        try {
            interval_min = Integer.parseInt(jTextFieldIntervalMin.getText());
            interval_max = Integer.parseInt(jTextFieldIntervalMax.getText());
            latency = Integer.parseInt(jTextFieldLatency.getText());
            timeout = Integer.parseInt(jTextFieldTimeout.getText());
            prefs.put("interval_min", "" + interval_min);
            prefs.put("interval_max", "" + interval_max);
            prefs.put("latency", "" + latency);
            prefs.put("timeout", "" + timeout);
        }
        catch(Exception e) {
            JOptionPane.showMessageDialog(this, "Invalid connection parameter(s)" ,e.toString(), JOptionPane.ERROR_MESSAGE);
            e.printStackTrace();
            return;
        }
        
        jButtonConnect.setEnabled(false);
        jButtonDisconnect.setEnabled(true);
        jButtonRefresh.setEnabled(true);
        jButtonDiscover.setEnabled(false);
       
        bgapi.send_gap_connect_direct(BDAddr.fromString(bledevice.getAddress()), 1, interval_min, interval_max, latency,timeout);
    }
    
    
    private void jButtonDisconnectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonDisconnectActionPerformed
        do_disconnect();
    }//GEN-LAST:event_jButtonDisconnectActionPerformed

    public void do_disconnect() {
        bledevice = null;
        if (connection >= 0) {
            bgapi.send_connection_disconnect(connection);
        }
        connection = -1;
        jTextFieldConnStatus.setText("Diconnected.");
        jButtonConnect.setEnabled(true);
        jButtonRefresh.setEnabled(false);
        jButtonDisconnect.setEnabled(false);
        jButtonDiscover.setEnabled(true);
    }
    
    private void jButtonRefreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonRefreshActionPerformed
        if (connection < 0) {
            
            jTextFieldConnStatus.setText("Not Connected.");
            jButtonConnect.setEnabled(true);
            jButtonRefresh.setEnabled(false);
            jButtonDisconnect.setEnabled(false);
            jButtonDiscover.setEnabled(true);
        }
        else {
            bgapi.send_connection_get_status(connection);
        }
    }//GEN-LAST:event_jButtonRefreshActionPerformed

    private BGAPIPacketLogger logger = new BGAPIPacketLogger();
    
    private void jCheckBoxDebugActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxDebugActionPerformed
        
        if (bgapi == null) return;
        if (jCheckBoxDebug.isSelected()) {
            bgapi.getLowLevelDriver().addListener(logger);
        }
        else {
            bgapi.getLowLevelDriver().removeListener(logger);
        }
    }//GEN-LAST:event_jCheckBoxDebugActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        this.setVisible(false);
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButtonBrowseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonBrowseActionPerformed
        jTextFieldSerial.setText(BLED112.selectSerialPort());
    }//GEN-LAST:event_jButtonBrowseActionPerformed

    private void jTextFieldIntervalMinActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldIntervalMinActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextFieldIntervalMinActionPerformed

    private void jTextFieldLatencyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldLatencyActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextFieldLatencyActionPerformed

    private void jListDevicesValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_jListDevicesValueChanged
        if (!evt.getValueIsAdjusting()) {
            if (jListDevices.getSelectedValue() != null && connection < 0) {
                jButtonConnect.setEnabled(true);
                jButtonDisconnect.setEnabled(false);
                jButtonDiscover.setEnabled(true);
            }
        }
    }//GEN-LAST:event_jListDevicesValueChanged

    boolean autoclose = false;
    
    private void jListDevicesMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jListDevicesMouseClicked
        if (evt.getClickCount() > 1) {
            
            if (connection >=0) {
                do_disconnect();
                try {
                Thread.sleep(250);
            } catch (InterruptedException ex) {
                Logger.getLogger(BLEExplorerDialog.class.getName()).log(Level.SEVERE, null, ex);
            }
            }
            
            autoclose = true;
            do_connect();

        }
    }//GEN-LAST:event_jListDevicesMouseClicked
    /*
     * GATT DISCOVERY
     */
    private static final int IDLE = 0;
    private static final int SERVICES = 1;
    private static final int ATTRIBUTES = 2;
    private Iterator<BLEService> discovery_it = null;
    private BLEService discovery_srv = null;
    private int discovery_state = IDLE;
    
    // Callbacks for class system (index = 0)
	public void receive_system_reset() {}
	public void receive_system_hello() {}
	public void receive_system_address_get(BDAddr address) {}
	public void receive_system_reg_write(int result) {}
	public void receive_system_reg_read(int address, int value) {}
	public void receive_system_get_counters(int txok, int txretry, int rxok, int rxfail) {}
	public void receive_system_get_connections(int maxconn) {}
	public void receive_system_read_memory(int address, byte[] data) {}
	public void receive_system_get_info(int major, int minor, int patch, int build, int ll_version, int protocol_version, int hw) {
            jTextFieldBLED112.setText("Connected. BLED112:" + major + "." + minor + "." + patch + " (" + build + ") " + "ll=" + ll_version + " hw=" + hw);
        }
	public void receive_system_endpoint_tx() {}
	public void receive_system_whitelist_append(int result) {}
	public void receive_system_whitelist_remove(int result) {}
	public void receive_system_whitelist_clear() {}
	public void receive_system_boot(int major, int minor, int patch, int build, int ll_version, int protocol_version, int hw) {}
	public void receive_system_debug(byte[] data) {}
	public void receive_system_endpoint_rx(int endpoint, byte[] data) {}

	// Callbacks for class flash (index = 1)
	public void receive_flash_ps_defrag() {}
	public void receive_flash_ps_dump() {}
	public void receive_flash_ps_erase_all() {}
	public void receive_flash_ps_save(int result) {}
	public void receive_flash_ps_load(int result, byte[] value) {}
	public void receive_flash_ps_erase() {}
	public void receive_flash_erase_page(int result) {}
	public void receive_flash_write_words() {}
	public void receive_flash_ps_key(int key, byte[] value) {}

	// Callbacks for class attributes (index = 2)
	public void receive_attributes_write(int result) {}
	public void receive_attributes_read(int handle, int offset, int result, byte[] value) {}
	public void receive_attributes_read_type(int handle, int result, byte[] value) {}
	public void receive_attributes_user_response() {}
	public void receive_attributes_value(int connection, int reason, int handle, int offset, byte[] value) {
            System.out.println("Attribute Value att=" + Integer.toHexString(handle) + " val = " + bytesToString(value));
        }
	public void receive_attributes_user_request(int connection, int handle, int offset) {}

	// Callbacks for class connection (index = 3)
	public void receive_connection_disconnect(int connection, int result) {}
	public void receive_connection_get_rssi(int connection, int rssi) {}
	public void receive_connection_update(int connection, int result) {}
	public void receive_connection_version_update(int connection, int result) {}
	public void receive_connection_channel_map_get(int connection, byte[] map) {}
	public void receive_connection_channel_map_set(int connection, int result) {}
	public void receive_connection_features_get(int connection, int result) {}
	public void receive_connection_get_status(int connection) {}
	public void receive_connection_raw_tx(int connection) {}
	
        protected int connection = -1;
        protected BLEDevice bledevice = null;
        public void receive_connection_status(int conn, int flags, BDAddr address, int address_type, int conn_interval, int timeout, int latency, int bonding) {
            jTextFieldConnStatus.setText("[" + address.toString() + "] Conn = " + conn + " Flags = " + flags);
            if (flags != 0) {
                bledevice = devList.getFromAddress(address.toString());
                this.connection = conn;
                jButtonConnect.setEnabled(false);
                jButtonRefresh.setEnabled(true);
                jButtonDisconnect.setEnabled(true);
                jButtonDiscover.setEnabled(false);
                if (autoclose) this.setVisible(false);
            }
            else {
                System.out.println("Connection lost!");
                connection = -1;
                bledevice = null;
                jButtonConnect.setEnabled(true);
                jButtonRefresh.setEnabled(false);
                jButtonDisconnect.setEnabled(false);
                jButtonDiscover.setEnabled(true);
            } 
            autoclose = false;
        }
	public void receive_connection_version_ind(int connection, int vers_nr, int comp_id, int sub_vers_nr) {}
	public void receive_connection_feature_ind(int connection, byte[] features) {}
	public void receive_connection_raw_rx(int connection, byte[] data) {}
	public void receive_connection_disconnected(int connection, int reason) {}

	// Callbacks for class attclient (index = 4)
	public void receive_attclient_find_by_type_value(int connection, int result) {}
	public void receive_attclient_read_by_group_type(int connection, int result) {}
	public void receive_attclient_read_by_type(int connection, int result) {}
	public void receive_attclient_find_information(int connection, int result) {}
	public void receive_attclient_read_by_handle(int connection, int result) {}
	public void receive_attclient_attribute_write(int connection, int result) {}
	public void receive_attclient_write_command(int connection, int result) {}
	public void receive_attclient_reserved() {}
	public void receive_attclient_read_long(int connection, int result) {}
	public void receive_attclient_prepare_write(int connection, int result) {}
	public void receive_attclient_execute_write(int connection, int result) {}
	public void receive_attclient_read_multiple(int connection, int result) {}
	public void receive_attclient_indicated(int connection, int attrhandle) {}
	public void receive_attclient_procedure_completed(int connection, int result, int chrhandle) {
            if (discovery_state != IDLE && bledevice != null) {
                if (discovery_state == SERVICES) { // services have been discovered
                    discovery_it = bledevice.getServices().values().iterator();
                    discovery_state = ATTRIBUTES;
                }
                if (discovery_state == ATTRIBUTES) {
                    if (discovery_it.hasNext()) {
                        discovery_srv = discovery_it.next();
                        bgapi.send_attclient_find_information(connection, discovery_srv.getStart(), discovery_srv.getEnd());
                    }
                    else { // Discovery is done
                        System.out.println("Discovery completed:");
                        System.out.println(bledevice.getGATTDescription());
                        discovery_state = IDLE;
                    }
                }
            }
            if (result != 0) {
                System.err.println("ERROR: Attribute Procedure Completed with error code 0x" + Integer.toHexString(result));
            }
        }
	public void receive_attclient_group_found(int connection, int start, int end, byte[] uuid) {
            if (bledevice != null) {
                BLEService srv = new BLEService(uuid, start, end);
                bledevice.getServices().put(srv.getUuidString(), srv); 
            }
        }
	public void receive_attclient_attribute_found(int connection, int chrdecl, int value, int properties, byte[] uuid) {}
	public void receive_attclient_find_information_found(int connection, int chrhandle, byte[] uuid) {
            if (discovery_state == ATTRIBUTES && discovery_srv != null) {
                BLEAttribute att = new BLEAttribute(uuid, chrhandle);
                discovery_srv.getAttributes().add(att);
            }
        }
	public void receive_attclient_attribute_value(int connection, int atthandle, int type, byte[] value) {
            //System.out.println("Attclient Value att=" + Integer.toHexString(atthandle) + " val = " + bytesToString(value));
        }
	public void receive_attclient_read_multiple_response(int connection, byte[] handles) {}

	// Callbacks for class sm (index = 5)
	public void receive_sm_encrypt_start(int handle, int result) {}
	public void receive_sm_set_bondable_mode() {}
	public void receive_sm_delete_bonding(int result) {}
	public void receive_sm_set_parameters() {}
	public void receive_sm_passkey_entry(int result) {}
	public void receive_sm_get_bonds(int bonds) {}
	public void receive_sm_set_oob_data() {}
	public void receive_sm_smp_data(int handle, int packet, byte[] data) {}
	public void receive_sm_bonding_fail(int handle, int result) {}
	public void receive_sm_passkey_display(int handle, int passkey) {}
	public void receive_sm_passkey_request(int handle) {}
	public void receive_sm_bond_status(int bond, int keysize, int mitm, int keys) {}

	// Callbacks for class gap (index = 6)
	public void receive_gap_set_privacy_flags() {}
	public void receive_gap_set_mode(int result) {}
	public void receive_gap_discover(int result) {}
	public void receive_gap_connect_direct(int result, int connection_handle) {}
	public void receive_gap_end_procedure(int result) {}
	public void receive_gap_connect_selective(int result, int connection_handle) {}
	public void receive_gap_set_filtering(int result) {}
	public void receive_gap_set_scan_parameters(int result) {}
	public void receive_gap_set_adv_parameters(int result) {}
	public void receive_gap_set_adv_data(int result) {}
	public void receive_gap_set_directed_connectable_mode(int result) {}
	public void receive_gap_scan_response(int rssi, int packet_type, BDAddr sender, int address_type, int bond, byte[] data) {
            BLEDevice d = devList.getFromAddress(sender.toString());
            if (d == null) { 
                d = new BLEDevice(sender.toString());
                devList.add(d);
                System.out.println("Create device: " + d.toString());
            }
            String name = new String(data).trim();
            if (d.getName().length() < name.length()) d.setName(name);
            d.setRssi(rssi);
            devList.changed(d);
        }
	public void receive_gap_mode_changed(int discover, int connect) {}

	// Callbacks for class hardware (index = 7)
	public void receive_hardware_io_port_config_irq(int result) {}
	public void receive_hardware_set_soft_timer(int result) {}
	public void receive_hardware_adc_read(int result) {}
	public void receive_hardware_io_port_config_direction(int result) {}
	public void receive_hardware_io_port_config_function(int result) {}
	public void receive_hardware_io_port_config_pull(int result) {}
	public void receive_hardware_io_port_write(int result) {}
	public void receive_hardware_io_port_read(int result, int port, int data) {}
	public void receive_hardware_spi_config(int result) {}
	public void receive_hardware_spi_transfer(int result, int channel, byte[] data) {}
	public void receive_hardware_i2c_read(int result, byte[] data) {}
	public void receive_hardware_i2c_write(int written) {}
	public void receive_hardware_set_txpower() {}
	public void receive_hardware_io_port_status(int timestamp, int port, int irq, int state) {}
	public void receive_hardware_soft_timer(int handle) {}
	public void receive_hardware_adc_result(int input, int value) {}

	// Callbacks for class test (index = 8)
	public void receive_test_phy_tx() {}
	public void receive_test_phy_rx() {}
	public void receive_test_phy_end(int counter) {}
	public void receive_test_phy_reset() {}
	public void receive_test_get_channel_map(byte[] channel_map) {}
        
        
   public String bytesToString(byte[] bytes) {
        StringBuffer result = new StringBuffer();
        result.append("[ ");
        for(byte b : bytes) result.append( Integer.toHexString(b & 0xFF) + " ");
        result.append("]");
        return result.toString();        
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButtonBLED112Conn;
    private javax.swing.JButton jButtonBLED112Disc;
    private javax.swing.JButton jButtonBrowse;
    private javax.swing.JButton jButtonConnect;
    private javax.swing.JButton jButtonDisconnect;
    private javax.swing.JButton jButtonDiscover;
    private javax.swing.JButton jButtonRefresh;
    private javax.swing.JCheckBox jCheckBoxDebug;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JList jListDevices;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField jTextFieldBLED112;
    private javax.swing.JTextField jTextFieldConnStatus;
    private javax.swing.JTextField jTextFieldIntervalMax;
    private javax.swing.JTextField jTextFieldIntervalMin;
    private javax.swing.JTextField jTextFieldLatency;
    private javax.swing.JTextField jTextFieldSerial;
    private javax.swing.JTextField jTextFieldTimeout;
    // End of variables declaration//GEN-END:variables
}
